import json
import os
from colorama import Fore, Back, Style
from datetime import datetime


def task_load():
	if os.path.exists("task.json"):
		with open("task.json", "r", encoding = "utf-8") as f:
			return json.load(f)

def task_save(data):
	with open("task.json", "w", encoding = "utf-8") as f:
		json.dump(data, f, indent = 2, ensure_ascii = False)

class TaskManager:
	def __init__(self):
		self.commands = {
			"menu": [
				f"[1] –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è",
				f"[2] –î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è",
				f"[3] –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è",
				f"[4] –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ",
				f"[5] –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è",
				f"[6] –ü–æ—à—É–∫ –ø–æ –∫–ª—é—á–æ–≤–æ–º—É —Å–ª–æ–≤—É",
				f"[7] {Fore.CYAN}–ï–∫—Å–ø–æ—Ä—Ç —É .txt{Style.RESET_ALL}",
				f"[8] {Fore.RED}–í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å{Style.RESET_ALL}",
				f"[0] –í–∏–π—Ç–∏"
			],
			"command": {
				"1": self.task_view,
				"2": self.tasks_add,
				"3": self.task_edit,
				"4": self.mark_done,
				"5": self.task_sorting,
				"6": self.task_search,
				"7": self.export_to_txt,
				"8": self.task_delete,
				"0": self.quit
			}
		}
		self.tasks = task_load() or []

	def no_task(self):
		if not self.tasks:
			print("\n–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω–∏–π!\n")
			return

	def task_lists(self):
		result = [self.format_task(task, i) for i, task in enumerate(self.tasks, start = 1)]
		return "\n".join(result)

	def format_task(self, task, index):
		status = "‚úÖ" if task['done'] else ""
		color = Fore.RED if task['priority'] == "high" else Fore.CYAN
		return f"{status} {color}{index}. [{task['data']}] {task['title']}{Style.RESET_ALL}"

	def priority_task(self, priority):
		priorities = {'1': "high", '2': "medium"}
		return priorities.get(priority, None)

	def number_task(self, index):
		if index.isdigit():
			i = int(index) - 1
			len_task = (0 <= i < len(self.tasks))
		else:
			print("\n‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.\n")
		return i, len_task

	def task_view(self):
		print(
			f"\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–≤–¥–∞–Ω—å: [{Fore.RED}–í–∞–∂–ª–∏–≤—ñ{Style.RESET_ALL}], [{Fore.CYAN}–ú–µ–Ω—å—à –≤–∞–∂–ª–∏–≤—ñ{Style.RESET_ALL}]\n"
			"–í–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è: ‚úÖ\n"
		)
		self.no_task()
		lists = self.task_lists()
		print(lists)

	def tasks_add(self):
		while True:
			add = input("–ó–∞–≤–¥–∞–Ω–Ω—è: ")
			setting = input("–û–±–µ—Ä–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: [1] –≤–∏—Å–æ–∫–∏–π, [2] —Å–µ—Ä–µ–¥–Ω—ñ–π: ")

			priority = self.priority_task(setting)
			data = datetime.now().strftime("%d.%m.%Y %H:%M")

			self.tasks.append({"title": add, "priority": priority, "done": False, "data": data})
			task_save(self.tasks)

			quit = input("–•–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ –∑–∞–≤–¥–∞–Ω–Ω—è? [1] —Ç–∞–∫, [0] –Ω—ñ: ")
			if quit == '0':
				break

	def task_edit(self):
		self.no_task()
		self.task_view()
		index = input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏: ")
		i, len_task = self.number_task(index)

		if len_task:
			title_edit = input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫–∞—Å—Ç: ")
			self.tasks[i]['title'] = title_edit
			task_save(self.tasks)
			print(f"\n‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ.")
		else:
			print("\n‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä.")

	def mark_done(self):
		self.task_view()
		index = input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ –≤–∏–∫–æ–Ω–∞–Ω–æ: ")
		i, len_task = self.number_task(index)

		if len_task:
			self.tasks[i]['done'] = True
			task_save(self.tasks)
			print(f"\n‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è '{self.tasks[i]['title']}' –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ.")
		else:
			print("\n‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä.")

	def task_sorting(self):
		self.no_task()
		sort_in = input("[1] –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É, [2] –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –ø–æ –≤–∏–∫–æ–Ω–∞–Ω–æ–º—É/–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ–º—É: ")
		sorted_task = []
		if sort_in == '1':
			choice = input("–°–æ—Ä—Ç—É–≤–∞—Ç–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É: [1] –≤–∏—Å–æ–∫–∏–π, [2] —Å–µ—Ä–µ–¥–Ω—ñ–π: ")
			priority = self.priority_task(choice)
			sorted_task = [task for task in self.tasks if task['priority'] == priority]
		elif sort_in == '2':
			choice = input("–°–æ—Ä—Ç—É–≤–∞—Ç–∏ –ø–æ: [1] –≤–∏–∫–æ–Ω–∞–Ω–æ, [2] –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ: ")
			done = choice == '1'
			sorted_task = [task for task in self.tasks if task['done'] == done]
		else:
			print("\n‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä.")

		print(f"\nüîé –ó–Ω–∞–π–¥–µ–Ω–æ {len(sorted_task)} –∑–∞–≤–¥–∞–Ω—å:")
		for i, task in enumerate(sorted_task, start = 1):
			print(self.format_task(task, i))

	def task_search(self):
		self.no_task()
		key = input("–í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ—à—É–∫—É: ").lower()
		found = [task for task in self.tasks if key in task['title'].lower()]

		if found:
			print("\nüîé –ó–Ω–∞–π–¥–µ–Ω–æ {len(found)} –∑–∞–≤–¥–∞–Ω—å:")
			for i, task in enumerate(found, start = 1):
				print(self.format_task(task, i))
		else:
			print("\n‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

	def export_to_txt(self):
		filename = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É (–±–µ–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è): ") + ".txt"
		with open(filename, "w", encoding = "utf-8") as f:
			for i, task in enumerate(self.tasks, start = 1):
				priority = "–≤–∏—Å–æ–∫–∏–π" if task['priority'] == "high" else "—Å–µ—Ä–µ–¥–Ω—ñ–π"
				status = "–í–∏–∫–æ–Ω–∞–Ω–æ" if task['done'] else "–ù–µ –≤–∏–∫–æ–Ω–∞–Ω–æ"
				f.write(f"{i}. [{task['data']}] {task['title']} | –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {priority} | –°—Ç–∞—Ç—É—Å: {status}\n")
			print(f"\nüìÅ –ó–∞–≤–¥–∞–Ω–Ω—è –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É —Ñ–∞–π–ª: {filename}")

	def task_delete(self):
		self.no_task()
		self.task_view()
		index = input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏: ")
		i, len_task = self.number_task(index)

		if len_task:
			delete = input("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω—è? [1] —Ç–∞–∫, [0] –Ω—ñ: ")
			if delete == '1':
				del self.tasks[i]
				task_save(self.tasks)
				print("\n‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.")
		else:
			print("\n‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä.")

	def quit(self):
		exit(0)

	def run(self):
		if self.tasks:
			self.task_view()

		while True:
			for menu in self.commands['menu']:
				print(menu)
			command = input("> ")
			if command in self.commands['command']:
				self.commands['command'][command]()
			else:
				print("\n‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


def main():
	app = TaskManager()
	app.run()

if __name__ == '__main__':
	main()